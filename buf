
#(⍋1⊸⊏˘∘>)⊸⊏d

  While ((done≠1) ∧ (0<≠pQ))‿{
    # get smallest node: sort + reassign, get it and drop
    pQ↩(⍋1⊏pQ)⊸⊏˘pQ
    s←⊑pQ
    pQ 1⊸↓˘↩pQ

# done until here: 20th Jan
    {
      s≡end ? done←1 ; 
      #find all neighboring nodes of this `smallest`
      #e.g. ⟨ ⟨ 'C' 'D' 2 ⟩ ⟨ 'C' 'F' 4 ⟩ ⟨ 'C' 'A' 2 ⟩ ⟩
      neighborList←(s=⊏˘∘>) ⊸/fullAdjList

      # get distance of `s`
      # dist←⊑1⊏(s=⊏distList)⊸/˘distList
      # beware that distList format has changed
      # 20th Jan
      #  'C'{⊑(𝕨⊸=⊏˘∘>)⊸/𝕩}d
      # ⟨ 'C' 2 ⟩

      # add smallest distance to neighbors
      #(<⟨0,0,2⟩) + ⟨⟨'C','D',2 ⟩,⟨'C','F',4 ⟩,⟨ 'C','A',2 ⟩ ⟩
  #⟨ ⟨ 'C' 'D' 4 ⟩ ⟨ 'C' 'F' 6 ⟩ ⟨ 'C' 'A' 4 ⟩ ⟩
      candidateList←neighborList+<⟨0,0,dist⟩

      # get next node
      #1⊑¨⟨⟨'C','D',2 ⟩,⟨'C','F',4 ⟩,⟨ 'C','A',2 ⟩ ⟩
  #"DFA"
			nextNodes←1⊑¨neighborList
			
		  # get next node distances
     	#((⊏t)⊐"DFA")⊸⊏˘t
	#┌─
	#╵ 'D' 'F' 'A'
	#   3   5   0
	#              ┘
   		#1⊏((⊏t)⊐"DFA")⊸⊏˘t
	#⟨ 3 5 0 ⟩

# how to change multiple items in a list
#   5‿4⌾(1‿3⊸⊏)a
#⟨ 0 5 2 4 4 ⟩



    }
  } 
---


    {
      smallestNode≡end ? done↩1 ; 
      #find all neighboring nodes of this `smallest`
      neighborList←(smallestNode=⊏˘∘>) ⊸/fullAdjList

      smallestDist←1⊑smallestNode{⊑(𝕨⊸=⊏˘∘>)⊸/𝕩}distList

      # add smallest distance to neighbors
      candidateDist←smallestDist+2⊑¨neighborList
      nextNodes←1⊑¨neighborList
      distInd←(⊏˘>distList)⊐nextNodes
      nextNDist←1⊑¨distInd⊏distList

      # get only those which candidateDist is < nextNDist
      needChangeDInd←(candidateDist<nextNDist)/distInd
      # facing issue with key-value pair reassignment
      {
        k‿v←𝕩⊑distList
        distList↩k‿candidateDist⌾(𝕩⊸⊑)distList
        prevList↩k‿smallestNode⌾(𝕩⊸⊑)distList
        pQ ∾↩ k‿candidateDist
      }¨needChangeDInd
    }




